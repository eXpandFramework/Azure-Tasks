# https://aka.ms/yaml
variables:
  - group: Keys
trigger: 
  paths:
     include:
      - /Index-DevExpress-Packages-Contents.yml
  branches:
     include:
       - master
pool:
  vmImage: vs2017-win2016
steps:
- checkout: self
  clean: true
- powershell: |
    $VerbosePreference="continue"
    Install-Module XpandPosh -RequiredVersion 1.0.35 -Scope CurrentUser -Force -Repository PSGallery
    $directory="$(Agent.BuildDirectory)"
    Set-Location $directory
    $url="https://$(GithubUserName):$(GithubPass)@github.com/eXpandFramework/DevExpress.PackageContent.git"
    git clone $url
    Set-Location "$directory\DevExpress.PackageContent"
    git config --global user.email "$(githubuserEmail)" 
    git config --global user.name "$(GithubUserFullName)" 
    if (!(Test-Path ".\VersionList.txt")){
      $dxFeed="$(DXApiFeed)"
      Write-Host "Populating versions"
      Get-NugetPackageSearchMetadata -AllVersions -Sources $dxFeed|Select-Object -ExpandProperty metadata|ForEach-Object{
          $_.Version.ToString()
      }|Select-Object -Unique|ForEach-Object{
        Add-Content -Value $_ "VersionList.txt"
      }
      git add -A 
      git commit -m "Version list"
      git push origin
    }
  failOnStderr: false
  displayName: IndexVersions
- powershell: |
    $VerbosePreference="continue"
    $dxFeed="$(DXApiFeed)"
    $latestVersion=@()
    $versionListPath="$(Agent.BuildDirectory)\DevExpress.PackageContent\VersionList.txt"
    $versionList=Get-Content $versionListPath
    $dxVersion=Get-DevExpressVersion -Latest -Sources $(DXApiFeed)
    if (($versionList|Select-Object -First 1) -ne $dxVersion){
        $latestVersion=@("$dxVersion")
    }
    
    ($versionList+$latestVersion)|ForEach-Object {
        $version=$_
        if (!(Test-Path "$(Agent.BuildDirectory)\DevExpress.PackageContent\Contents\$version.csv")){
          $directory=New-Item "$(Agent.BuildDirectory)\$_" -ItemType Directory -ErrorAction Continue
          Write-host "Downloading $version"
          Get-NugetPackage -OutputFolder "$($directory.FullName)" -Sources $dxFeed -Versions $version |ForEach-Object {
              [PSCustomObject]@{
                  Package         = $_.Package
                  Version         = $_.Version.ToString();
                  Assembly        = [system.IO.Path]::GetFileName($_.File)
                  DotNetFramework = $_.DotNetFramework
              }
              Write-host "Exporting $($_.Package) $($_.DotnetFramework)"
          }|Export-Csv -Path "$(Agent.BuildDirectory)\DevExpress.PackageContent\Contents\$version.csv" -NoTypeInformation
          
          if (!($versionlist|Select-String $version)){
              write-Host "New Version found"
              ($latestVersion+$versionList)
              ($latestVersion+$versionList)|Out-File $versionListPath
          }
          Set-Location $(Agent.BuildDirectory)\DevExpress.PackageContent
          git add -A 
          git commit -m "$_"
          git push origin 
          git tag $version
          git push -f --tags
          Remove-Item "$($directory.FullName)" -Recurse -Force -ErrorAction SilentlyContinue
        }
    }
  failOnStderr: false
  displayName: CreateCsv






